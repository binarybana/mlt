version: 2
jobs:
  build:
    machine: true
    environment:
      CHANGE_MINIKUBE_NONE_USER: true
    # docker:
    #   - image: ubuntu:16.04
    #   - image: registry:2
    #     name: registry
    working_directory: ~/repo
    steps:
      - checkout

      - run:
          name: Installing test/lint dependencies
          command: |
            # get python3 for tox
            sudo apt-get update
            sudo apt-get install -yq --no-install-recommends --fix-missing \
                curl \
                git \
                make \
                python \
                python-dev \
                python-pip \
                python-setuptools \
                python3 \
                python3-dev \
                python3-pip \
                python3-setuptools \
                python3-wheel \
                tar
            python -m pip install tox

      # - run:
      #     name: lint tests
      #     command: |
      #       make lint
      
      # - run:
      #     name: Run unit tests
      #     command: |
      #       make test

      - run:
          name: Installing docker dependencies
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin

      # - setup_remote_docker:
      #     docker_layer_caching: true

      - run:
          name: Installing minikube
          command: |
            curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.9.4/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
            sudo minikube start --vm-driver=none
            sudo minikube update-context
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done
            kubectl cluster-info
            # kubectl run circleci-example --image=nginx
            # kubectl get deployment

      - run:
          name: Run e2e tests
          command: |
            make test-e2e
